package ${targetServicePackage}.implementations.jdbc;
import ${targetServicePackage}.implementations.jdbc.JDBCCommandObject;
import ${targetServicePackage}.interfaces.${name};
import ${targetServicePackage}.valueobjects.${name}Object;
import ${targetServicePackage}.exceptions.ServiceRuntimeException;
import ${targetServicePackage}.exceptions.ServiceSecurityViolation;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


import java.util.List;
import java.lang.Exception;

public class ${name}Impl extends JDBCCommandObject implements ${name} {
##   private static final String commandParameter = "${name}Action";
    private static final String TABLE_NAME = "$table.name";
	private static Log log = LogFactory.getLog(${name}Impl.class);
	
##foreach ( $column in $table.Columns )    private static final String $column.name = "#dropCase($column.javaName)";
##end
    private static final String INSERT_STATEMENT = 
    	"INSERT INTO $table.name ( " +
	    #colWriteAll ( ' " ' $table ' , " + ' ' " + ')
        " )  VALUES ( " +
	    #colToken ( $table '" ? , " + ' '" ? ); " ;' )

    private static final String UPDATE_STATEMENT = 
    	"UPDATE $table.name SET " +
	    #colWriteNonKeys ( ' " ' $table ' = ? , " + ' ' = ?  " +')
		" WHERE " +
	    #colWriteKeys ( ' " ' $table ' = ? AND " + ' ' = ?; "; ')

    private static final String SELECT_ALL_STATEMENT = 
    	"SELECT " +
	    #colWriteAll ( ' " ' $table ' , " + ' ' " + ' )
	    " FROM $table.name; " ;

    private static final String SELECT_WHERE_STATEMENT = 
    	"SELECT " +
	    #colWriteAll ( ' " ' $table ' , " + ' ' " + ')
	    " FROM $table.name WHERE" + 
	    #colWriteKeys ( ' " ' $table ' = ? AND " + ' ' = ?; "; ' )

    private static final String DELETE_STATEMENT = 
    	"DELETE FROM $table.name WHERE " +
	    #colWriteKeys ( ' " ' $table ' = ? AND " + ' ' = ?; "; ' )

    // TODO:  insert creation code for ${name}
    public ${name}Object add${name}(${name}Object d) throws  
        ServiceSecurityViolation, ServiceRuntimeException   {
        if (log.isDebugEnabled()) {
        	log.debug("Creating Data for " +
        		TABLE_NAME);
        }
        String params[]= {	#colWriteJavaKeys ( ' d.get' $table '() , ' '() }; ' )
        try {
        	super.performModificationQuery(INSERT_STATEMENT, params);
        } catch (Exception e ) {
        	throw new ServiceRuntimeException();
        }
        return d;
    }

    // TODO:  insert read code for ${name}
    public ${name}Object display${name}(${name}Object d) throws 
        ServiceSecurityViolation, ServiceRuntimeException {
        if (log.isDebugEnabled()) {
        	log.debug("Reading Data for " +
        		TABLE_NAME);
        }
    	String params[]= {	#colWriteJavaKeys ( ' d.get' $table '() , ' '() }; ' )
        try {
        	super.performReadQuery(SELECT_WHERE_STATEMENT, params);
    	} catch (Exception e ) {
    	    log.error(e);
        	throw new ServiceRuntimeException();
        }
        return d;
    }
    // TODO:  insert update code for ${name}
    public ${name}Object edit${name}(${name}Object d) throws  
        ServiceSecurityViolation, ServiceRuntimeException {
        if (log.isDebugEnabled()) {
        	log.debug("Updating Data for " +
        		TABLE_NAME);
        }
    	String params[]= {	#colWriteJavaKeys ( ' d.get' $table '() , ' '() }; ' )
		try {
	        super.performModificationQuery(UPDATE_STATEMENT, params);
    	} catch (Exception e ) {
    	    log.error(e);
        	throw new ServiceRuntimeException();
        }

        return d;
    }
    // TODO:  insert deletion code for ${name}
    public ${name}Object delete${name}(${name}Object d) throws  
        ServiceSecurityViolation, ServiceRuntimeException  {
        if (log.isDebugEnabled()) {
        	log.debug("Deleting Data for " +
        		TABLE_NAME);
        }
    	String params[]= {	#colWriteJavaKeys ( ' d.get' $table '() , ' '() }; ' )
		try {
	        super.performModificationQuery(DELETE_STATEMENT, params);
    	} catch (Exception e ) {
    	    log.error(e);
        	throw new ServiceRuntimeException();
        }

        return d;
    }
    
    public List getAll${name}() throws  
        ServiceSecurityViolation, ServiceRuntimeException  {
        if (log.isDebugEnabled()) {
        	log.debug("Deleting Data for " +
        		TABLE_NAME);
        }
        List list = null;
        try {
			list = super.performReadQuery( SELECT_ALL_STATEMENT );
    	} catch (Exception e ) {
    	    log.error(e);
        	throw new ServiceRuntimeException();
        }
    	return list;
    }
}

